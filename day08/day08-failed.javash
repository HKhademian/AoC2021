#!/usr/bin/env -S java --source 16

import java.io.*;
import java.util.ArrayList;
import java.util.HashSet;

public class day08 {
  public static final byte[] DIGITS = new byte[] {
    // abcdefg
    0b01011111, // 0
    0b00100100, // 1
    0b01011101, // 2
    0b01101101, // 3
    0b00101110, // 4
    0b01101011, // 5
    0b01111011, // 6
    0b00100101, // 7
    0b01111111, // 8
    0b01101111, // 9
  };
  public static final byte[] PROBS = new byte[] {
    0,                              // len=0  ->        : no poss
    0,                              // len=1  ->        : no poss
    DIGITS[1],                      // len=2  ->  1     : possible
    DIGITS[7],                      // len=3  ->  7     : possible
    DIGITS[4],                      // len=4  ->  4     : possible
    (byte)((byte)(DIGITS[2]|DIGITS[3])|DIGITS[5]),  // len=5  ->  2,3,5 : possible
    (byte)((byte)(DIGITS[0]|DIGITS[6])|DIGITS[9]),  // len=6  ->  0,6,9 : possible
    DIGITS[8],                      // len=7  ->  8     : possible
  };

  public static void showProb(byte prob) {
    for(int i=6; i>=0; i--)
      System.out.print((prob & (1<<i))!=0 ? "*" : ".");
    System.out.println();
  }

  public static void showProbs(byte[] probs, char base) {
    System.out.println();
    System.out.println("   ABCDEFG");
    for(int i=0; i<7; i++) {
      System.out.print(Character.toString(i+base)+": ");
      showProb(probs[i]);
    }
    System.out.println();
  }

  public static void main(String[] args) throws Throwable {
    var buffer = new BufferedReader(new FileReader(new File("./sample.txt")));
    String line;
    int count =0;

    while((line=buffer.readLine())!=null) {
      var parts = line.split(" \\| ");
      
      var probs = new byte[7];
      for(int i=0; i<7; i++) probs[i]=-1;
          
      for(var segments : parts[0].split(" ")) {
        var len = segments.length();
        var prob = PROBS[len];
        
        for(int i=0; i<segments.length(); i++) {
          var seg = segments.charAt(i)-'a';
          probs[seg] &= prob;
        }
      }

      showProbs(probs, 'a');


      for(var segs : parts[1].split(" ")) {
        System.out.println("SEGS= " + segs);

        var combs = new HashSet<Byte>();
        combs.add((byte)0);

        for(var i=0; i<segs.length(); i++) {
          System.out.println("SEG: " + segs.charAt(i));
          var seg = segs.charAt(i) - 'a';
          var prob = probs[seg];
          showProb(prob);
          var newcombs = new HashSet<Byte>();
          for(var j=0; j<7; j++) {
            if((prob & (1<<j))!=0) {
              for(var comb : combs) {
                newcombs.add((byte)(comb | (byte)(1<<j)));
              }
            }
          }  
          combs = newcombs;
        }

        for(var comb: combs) {
          System.out.print("COMB: ");
          showProb(comb);
          for(var i=0; i<DIGITS.length; i++) {
            if(DIGITS[i] == comb) {
              System.out.println(i);
            }
          }
        }

        System.exit(0);
      }
    }
    System.out.print("Count: ");
    System.out.println(count);
  }
}
